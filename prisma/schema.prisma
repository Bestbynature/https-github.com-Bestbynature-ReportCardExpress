generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  studentId         String   @id @default(uuid())
  firstName         String
  lastName          String
  gender            String
  parentPhoneNumber String?
  parentEmail       String   @unique
  currentClass      String
  currentSession    String
  age               Int
  profilePhotoUrl   String?
  role              String?  @default("student")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  results           Result[]

  @@map("students")
}

model Teacher {
  teacherId String   @id @default(uuid())
  firstName String
  lastName  String
  gender    String
  role      String?  @default("teacher")
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

model Result {
  resultId    String  @id @default(uuid())
  scoreObject Json
  studentId   String
  student     Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@index([studentId], name: "student_result_Idx")
  @@map("results")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
